{
  "title": "Implement Trie (Prefix Tree)",
  "description": "Implement a trie (prefix tree) with insert, search, and startsWith methods.",
  "examples": [
    {
      "input": [
        "insert('apple')", "search('app')", "search('apple')", "startsWith('app')",
        "insert('app')", "search('app')"
      ],
      "output": [
        null, false, true, true, null, true
      ],
      "explanation": "After inserting 'apple' into the trie, 'search' returns false for 'app' but true for 'apple'. 'startsWith' returns true for 'app'."
    }
  ],
  "constraints": [
    "You may assume that all inputs consist of lowercase letters a-z.",
    "All inputs are guaranteed to be non-empty strings."
  ],
  "answers": {
    "python": {
      "code": "class Trie:\n    def __init__(self):\n        self.root = {}\n\n    def insert(self, word: str) -> None:\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n\n    def search(self, word: str) -> bool:\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node\n\n    def startsWith(self, prefix: str) -> bool:\n        node = self.root\n        for char in prefix:\n            if char not in node:\n                return False\n            node = node[char]\n        return True",
      "explanation": "The Trie class implements a trie data structure with insert, search, and startsWith methods. It uses a dictionary to represent each node in the trie. 'insert' method inserts a word into the trie, 'search' method checks if a word exists in the trie, and 'startsWith' method checks if there is any word in the trie that starts with the given prefix."
    },
    "cpp": {
      "code": "#include <string>\n#include <unordered_map>\n\nclass Trie {\nprivate:\n    struct TrieNode {\n        std::unordered_map<char, TrieNode*> children;\n        bool isEnd;\n        TrieNode() : isEnd(false) {}\n    };\n    TrieNode* root;\n\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(std::string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->isEnd = true;\n    }\n\n    bool search(std::string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                return false;\n            }\n            node = node->children[c];\n        }\n        return node->isEnd;\n    }\n\n    bool startsWith(std::string prefix) {\n        TrieNode* node = root;\n        for (char c : prefix) {\n            if (node->children.find(c) == node->children.end()) {\n                return false;\n            }\n            node = node->children[c];\n        }\n        return true;\n    }\n};",
      "explanation": "The Trie class implements a trie data structure with insert, search, and startsWith methods. It uses a nested TrieNode struct to represent each node in the trie. 'insert' method inserts a word into the trie, 'search' method checks if a word exists in the trie, and 'startsWith' method checks if there is any word in the trie that starts with the given prefix."
    }
  },
  "sent": "false"
}
